#!/usr/bin/env python
import json
import os

from bs4 import BeautifulSoup
import requests

html_file = "data/restaurant_list.html"
json_file = "data/restaurant_list.json"
url = "http://www.jcdh.org/EH/FnL/FnL03.aspx"

def init():
    """
    When we run this file as ./scrape.py, what functions should we call?
    """

    # If the HTML file isn't there, scrape it.
    if not os.path.exists(html_file):
        scrape_list_html()

    # If the JSON file isn't there, parse the HTML file to make it.
    if not os.path.exists(json_file):
        parse_list_html()

    # If the JSON file is there, make us a neat summary.
    if os.path.exists(json_file):
        summarize_inspections()

def scrape_list_html():
    """
    Might as well have a pair of functions to do our stuff.
    Two things we want to do? Scrape html from the site, then parse it for data.
    So, this will scrape and download the HTML for the restaurant list.
    """

    data = {}
    data["ctl00$ScriptManager1"] = "ctl00$updPnl|ctl00$BodyContent$btnSearch"
    data["__LASTFOCUS"] = ""
    data["__EVENTTARGET"] = ""
    data["__EVENTARGUMENT"] = ""
    data["__VIEWSTATE"] = ""
    data["__EVENTVALIDATION"] = "/wEWGAL31/rsAgLH9KHnAgKey+rMAQLHnfaXBALpu6S2DwLfh5bMBQKZl6CuDALkt5etDAKq9NziCQKI6ZSeBwKOoaVkAqvO6GQCnaaG2gICpcT57gEC+sydvwUCvtDMuAUCxOTC9AIC2+ev3A4Cq9H72AYCmJTp8ggC36PWzgMCt5TDogYCvvDiXAK/yv2wA7NIIzqjGrc+LEQqHz5ZKe9OCqr3"
    data["ctl00$txtSearch"] = ""
    data["ctl00$BodyContent$txtBKeyword"] = ""
    data["hiddenInputToUpdateATBuffer_CommonToolkitScripts"] = "1"
    data["ctl00$BodyContent$btnSearch"] = "Search"

    headers = {}
    headers["Accept"] = "*/*"
    headers["Accept-Encoding"] = "gzip,deflate,sdch"
    headers["Accept-Language"] = "en-US,en;q=0.8"
    headers["Cache-Control"] = "no-cache"
    headers["Connection"] = "keep-alive"
    headers["Content-Length"] = "45938"
    headers["Content-Type"] = "application/x-www-form-urlencoded"
    headers["Cookie"] = "ASP.NET_SessionId=qw1wzj32griyyp55ldacth45; LastId=2"
    headers["DNT"] = "1"
    headers["Host"] = "www.jcdh.org"
    headers["Origin"] = "http://www.jcdh.org"
    headers["Referer"] = "http://www.jcdh.org/EH/FnL/FnL03.aspx"
    headers["User-Agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.107 Safari/537.36"
    headers["X-MicrosoftAjax"] = "Delta=true"

    r = requests.post(url, data=data, headers=headers)

    with open(html_file, 'wb') as writefile:
        writefile.write(r.content)

def parse_list_html():
    """
    Now that we've written to a file, read the file and parse the links with BeautifulSoup.
    """
    with open(html_file, 'rb') as readfile:

        soup = BeautifulSoup(readfile.read())

        restaurants = []

        for row in soup.select('#ctl00_BodyContent_gvFoodScores tr'):

            # Set up a dictionary for storing restaurant data.
            restaurant_dict = {}

            try:

                # Start adding stuff to our dictionary.
                restaurant_dict['smoking'] = row.select('td')[0].text.strip().encode('utf-8')
                restaurant_dict['name'] = row.select('td')[1].text.strip().encode('utf-8')
                restaurant_dict['restaurant_type'] = row.select('td')[2].text.strip().encode('utf-8')
                restaurant_dict['address'] = row.select('td')[3].text.strip().encode('utf-8')

                # Let's make a little nested dictionary for the latest score.
                restaurant_dict['latest_score'] = {}
                restaurant_dict['latest_score']['score'] = row.select('td')[4].text.strip().encode('utf-8')
                restaurant_dict['latest_score']['date_string'] = row.select('td')[5].text.strip().encode('utf-8')

                """
                The result will look like this:
                {
                    "smoking": "yes",
                    "name": "Some Restaurant Name",
                    "url": "http://some.restaurant.url/",
                    "restaurant_type": "Bars and Lounges",
                    "latest_score": {
                        "score": "99",
                        "url": "http://some.restaurant.url/?id=506",
                        "date_string": "02/05/2014"
                    }
                }
                """

                restaurants.append(restaurant_dict)

            except IndexError:
                # Some restaurants are missing things. We'll skip 'em for now.
                print row.select('td')

        # Write the list of restaurants to JSON.
        with open(json_file, 'wb') as writefile:
            writefile.write(json.dumps(restaurants))

def summarize_inspections():
    """
    Let's do a little summary thing.
    """
    with open(json_file, 'rb') as readfile:
        restaurant_list = list(json.loads(readfile.read()))

    # Get the total number of restaurants.
    total_restaurants = len(restaurant_list)

    # Set a score variable.
    total_score = 0

    # Loop over all the restaurants.
    for restaurant in restaurant_list:

        try:

            # If this restaurant has a score that is an integer, add it to the total.
            total_score += int(restaurant['latest_score']['score'])

        except ValueError:

            # Otherwise, remove this restaurant from the list.
            restaurant_list -= 1

    # The average is the total score / total number of restaurants.
    print "Average score: %s" % (total_score / total_restaurants)

if __name__ == "__main__":
    init()

